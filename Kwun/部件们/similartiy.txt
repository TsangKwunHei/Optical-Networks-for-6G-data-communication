// Function to compute Jaccard similarity between two sets
float computeJaccardSimilarity(const unordered_set<int>& set1, const unordered_set<int>& set2) {
    if (set1.empty() && set2.empty()) return 1.0f;
    
    int intersection_size = 0;
    for (const auto& elem : set1) {
        if (set2.find(elem) != set2.end()) {
            intersection_size++;
        }
    }
    
    int union_size = set1.size() + set2.size() - intersection_size;
    return static_cast<float>(intersection_size) / static_cast<float>(union_size);
}

使用方法（放在你生成T1组的function里面相当于一个审核器，如果生成出來的不及格,那就return false）
    float similarity = computeJaccardSimilarity(existing_scenario, current_scenario);
    if (similarity > 0.5f) {
        isValid = false;
        break;
    }

// 如果isValid那就允许成为T1
if (isValid) {
    generated_scenarios.push_back(current_scenario); 
}
